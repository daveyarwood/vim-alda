*alda.txt*	A Vim plugin for editing and playing Alda scores.

                            ________________________________
                           /    o   oooo ooo oooo   o o o  /\
                          /    oo  ooo  oo  oooo   o o o  / /
                         /    _________________________  / /
                        / // / // /// // /// // /// / / / /
                       /___ //////////////////////////_/ /
                       \____\________________________\_\/

                                    - alda -

INTRODUCTION			               		*ft-alda* *alda*

Alda is a music programming language designed for musicians who don't
necessarily know how to program, as well as programmers who don't necessarily
know how to music.

For more information on Alda itself:

	http://github.com/alda-lang/alda

This plugin provides a nice environment for Vim users to work on Alda scores.

================================================================================
CONTENTS					*ft-alda-contents* *alda-contents*

  1.  Options .................................. |alda-options|
  2.  Indentation .............................. |alda-indent|
  3.  Syntax Highlighting ...................... |alda-syntax|
  4.  Navigation ............................... |alda-sections|
  5.  Folding .................................. |alda-folding|
  6.  Parsing .................................. |alda-parse|
  7.  Playing .................................. |alda-play|
  8.  Alda CLI wrapper.......................... |alda-cli-wrapper|
  9.  Connecting to an Alda REPL server......... |alda-repl-connect|
  10. About .................................... |alda-about|

================================================================================
OPTIONS						*ft-alda-options* *alda-options*

g:alda_command					*g:alda_command* *alda_command*

	The path to the `alda` executable.
	default value: alda

================================================================================
INDENTATION					*ft-alda-indent* *alda-indent*

(not yet implemented)

================================================================================
SYNTAX HIGHLIGHTING				*ft-alda-syntax* *alda-syntax*

Syntax highlighting is provided.

================================================================================
NAVIGATION					*ft-alda-sections* *alda-sections*
					    *ft-alda-navigation* *alda-navigation*

Special behavior for Vim |object-motions| is provided.

|[[| and |]]| navigate to the previous/next top-level thing, which could be an
instrument part, Clojure expression, variable definition, or comment block.

(A "top-level thing" here is any block of text starting with a non-whitespace
character, either at the top of the file or following an empty line.)

|[]| and |][| navigate between instrument parts, specifically. For this to
work properly, you must follow the convention of starting each instrument part
at the beginning of a line (no leading whitespace), and break the line after
the colon, e.g.:
>
	piano:
	  c d e f g

	clarinet:
	  e f g a b

================================================================================
FOLDING						*ft-alda-folding* *alda-folding*

Alda instrument parts, voices, etc. are foldable using the standard Vim
|fold-commands|. This relies on indentation, so it is recommended that you
follow the convention of indenting "blocks" of Alda code such as instrument
parts and voices, e.g.:

>
	piano:
	  V1:
	    c8 d e f g a b > c

	  V2:
	    e8 f g a b > c d e

	violin:
	  c4. e8~4 g4

================================================================================
PARSING        					*ft-alda-parse* *alda-parse*

There are commands available to parse Alda code and show the parsed
representation of the score.

The parse results will be displayed in a vertical split with Clojure syntax
highlighting. `q` is mapped in this buffer as a convenient way to close it.

Note: This command relies on `alda` being installed and included in your
`$PATH`. If |g:alda_command| is set to an explicit path (e.g.
`/Users/dave/Downloads/alda`), it will use that executable instead.

Parse results are emitted in JSON format. As a bonus, if you have `jq`
installed and available on your `$PATH`, the JSON will be pretty-printed.
(jq: https://stedolan.github.io/jq)

Parsing the entire buffer as score data~

`:AldaParseBuffer` displays the JSON representation of the score that is
generated when the contents of the buffer are parsed. This is mapped to
<localleader>s.

Parsing the entire buffer as events~

`:AldaParseBufferEvents` parses the contents of the buffer and emits a JSON
array of objects representing score events. This is mapped to <localleader>E.

Parsing a selection as events~

There is a "parse events" operator that is mapped to <localleader>e in normal
and visual mode.

This operator can be used to parse small selections or blocks of Alda code and
see how the parser interprets the code excerpts as score events.

In visual mode, simply highlight the code you want to parse, then enter
<localleader>e.

In normal mode, you can use <localleader>e just like any other Vim operator.
For example...

<localleader>e$         parse from the cursor to the end of the line
<localleader>eaw	parse the word around the cursor
<localleader>ea)	parse the parenthesized expression around the cursor
<localleader>ee		parse the current line

================================================================================
PLAYING        					*ft-alda-play* *alda-play*

Playing Alda code relies on `alda` being installed and included in your
`$PATH`.  If |g:alda_command| is set to an explicit path (e.g.
`/Users/dave/Downloads/alda`), it will use that executable instead.

Playing a selection~

There is a play operator that is mapped to <localleader>p in normal and visual
mode.

This operator is useful for playing small selections or blocks of Alda code.

In visual mode, simply highlight the code you want to play, then enter
<localleader>p.

In normal mode, you can use <localleader>p just like any other Vim operator.
For example...

<localleader>p$         play from the cursor to the end of the line
<localleader>paw	play the word around the cursor
<localleader>pa)	play the parenthesized expression around the cursor
<localleader>pp		play the current line

Playing the entire buffer~

`:AldaPlayBuffer` will play the contents of the current buffer.

This is mapped to <localleader>P.

Stopping playback~

`:AldaStopPlayback` will stop all sound from the Alda server.

This is mapped to <localleader>S.

================================================================================
ALDA CLI WRAPPER    			*ft-alda-cli-wrapper* *alda-cli-wrapper*

vim-alda provides an `:Alda` command that can be used to issue arbitrary
`alda` CLI commands. It's just like running an `alda` command in your
terminal.

Your `alda` command runs in a subprocess and lines of stdout and stderr are
printed as they are produced.

For convenience, the <localleader>a mapping enters `:Alda` into the Vim
command line followed by a space. You can then complete the `alda` CLI command
and press <cr> to run it. (TIP: You can press <tab> to auto-complete the names
of Alda commands!)

Playing an Alda score~
>
 :Alda play -f /tmp/my-score.alda

Printing your Alda CLI version~
>
 :Alda version

Listing background player processes~
>
 :Alda ps

Running health checks, in verbose mode~
>
 :Alda -v2 doctor

================================================================================
CONNECTING TO AN ALDA REPL SERVER               	*ft-alda-repl-connect*
                                                          *alda-repl-connect*

By default, vim-alda is _not_ connected to an Alda REPL server. You can still
use all of the commands listed above, including playing snippets of code using
the play operator. However, each time you use the play operator, the code
snippet is evaluated in a _separate context_.

For a better understanding of what this means, try copying the following code
into a `.alda` file and play each line by itself by moving your cursor onto
that line and pressing <localleader>pp:
>
 # first, play this line:
 guitar: e8 f+ g 

 # then, play this line:
 a b2

When you play the first line, you'll hear 3 notes played on a guitar, as
expected.

When you play the second line, you might expect to hear 2 more notes played on
a guitar, however, you'll actually hear nothing. This is because the second
expression is equivalent to running `alda play --code "a b2"` at the command
line. Without the _context_ about the guitar being the "active" instrument,
those two notes `a` and `b2` are not played on any particular instrument.

Being able to preserve this context between evaluations is very useful for
experimentation and live coding. To achieve this, you must run an Alda REPL
server and then connect to it from vim-alda.

Starting an Alda REPL server~

In a separate terminal, run:
>
 alda repl --server

You should see some output that tells you which port the server is running on:
>
 nREPL server started on port 40105 on host localhost - nrepl://localhost:40105

Connecting to your Alda REPL server~

Back in Vim, run the following command to connect to the Alda REPL server:
>
 :AldaConnect 40105

For convenience, you can type <localleader>C, a convenience mapping for
`:AldaConnect`` folowed by a space. Then, you can type in the port number and
press enter.

If you started your Alda REPL server in the same directory where you started
Vim, you can leave out the port argument and vim-alda will figure it out by
reading a hidden file (`.alda-nrepl-port`) created by the Alda REPL server.
>
 :AldaConnect

This is mapped to <localleader>c.

As you evaluate snippets of Alda code, the Alda REPL server keeps track of
which instrument(s) are active and all of their properties (octave, volume,
panning, etc.) so that the context is not lost.

Resetting the Alda REPL server state~

If you ever want to erase this context and start over from a clean slate, you
can reset the state of the Alda REPL server by running this command:
>
 :AldaNewScore

This is mapped to <localleader>n.

Viewing the code entered so far~

At any time, you can see the Alda code that has been evaluated so far in your
current score by running:
>
 :AldaScoreText

This is mapped to <localleader>t.

Disconnecting from the Alda REPL server~

To tell vim-alda to forget about your Alda REPL server and go back to
evaluating every code snippet in a separate context, run:
>
 :AldaDisconnect

This is mapped to <localleader>d.

================================================================================
ABOUT						*ft-alda-about* *alda-about*

Please feel free to file any issues or contribute patches via GitHub:

	http://github.com/daveyarwood/vim-alda

This plugin is distributed under the Vim license. See |license|.

Copyright © 2017-2021 Dave Yarwood <dave.yarwood@gmail.com>

vim:tw=78:noet:sw=8:sts=8:ts=8:ft=help:norl:
